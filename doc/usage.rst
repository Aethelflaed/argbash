Argbash invocation
==================

So, you have a template and now it is time to (re)generate a shell script from it!

File layout
-----------

You have three options here, they are sorted by the estimated preference:

#. One file with both parsing code and script body.

   This is a both simple and functional approach, but your script will be polluted with the auto-generated argument parsing code.

#. Two files --- one for the parsing code and one for the script body, both taken care of by ``Argbash``.

   This is more suitable for people that prefer to keep things tidy, you can have the parsing code separate and included in the script at run-time.
   However, ``Argbash`` can assist you with that.

#. Same as the above, just without ``Argbash`` assistance.

   You have to take this path if your script has a non-matching square brackets problem (see :ref:`limitations`).
   This approach is similar to the approach of ``bash`` argument parsing libraries with one difference --- here, the library is generated by ``Argbash``, so it may be significantly less complex than those generic libraries such as :ref:`EasyOptions <easy_options>`.
   This is very unlikely.

.. note::

   We assume that you have installed (see :ref:`install`) the ``argbash`` script, so it is available in your terminal as a command ``argbash``.
   If it is not the case, you just have to substitute ``argbash`` by direct invocation of ``bin/argbash``.

Parsing code and script body together
+++++++++++++++++++++++++++++++++++++

Assuming that you have created a template file ``my-template.m4``, you simply run ``argbash`` over the script [*]_:

::

   argbash my-template.m4 -o my-script.sh

If you want to regenerate a new version of ``my-script.sh`` after you have modified its template section, you can run

::

   argbash my-script.sh -o my-script.sh

as the script can deal with input and output being the same file.

.. [*] ``m4`` is the file extension used for the ``M4`` language, but we use the ``m4sugar`` language extension built on top of it.

Separate file for parsing with assistance
+++++++++++++++++++++++++++++++++++++++++

You have two files, let's say it is a ``my-parsing.m4`` and ``my-script.sh``.
The ``my-parsing.m4`` file contains just the template section of ``my-script.sh``.
Then, you add a very small template code to ``my-script.sh`` at the beginning:

.. code-block:: bash

    # DEFINE_SCRIPT_DIR
    # INCLUDE_PARSING_CODE([my-parsing.sh])
    # ARGBASH_GO

    # [ <-- needed because of Argbash

    # HERE GOES THE SCRIPT BODY

    # ] <-- needed because of Argbash

i.e. you add thos three lines with definitions and you enclose the script in square brackets.

Finally, you just make sure that ``my-script.sh`` and ``my-parsing.m4`` are next to each other and run

::

   argbash my-script.sh -o my-script.sh

which finds ``my-parsing.m4`` (it would find ``my-parsing.sh`` too) and generates new ``my-parsing.sh`` and ``my-script.sh`` that you can use right away.

Separate file for parsing
+++++++++++++++++++++++++

If you want/have to take care of including the parsing code yourself, just make sure you do it in the script:

.. code-block:: bash

    source $(dirname $0)/my-parsing.sh

    # HERE GOES THE SCRIPT BODY

Then, you just generate ``my-parsing.sh`` using ``--standalone`` option:

.. code-block:: bash

   argbash my-parsing.m4 -o my-parsing.sh --standalone

.. _api_change:

API changes
-----------

The API of the ``Argbash`` project may change.
This typically means that

* names, parameters or effect of macros change, or
* parsed arguments are exposed differently

in a way that is not compatible with the previous API.

In case that you regenerate a script, ``argbash`` is able to deduce that it has been created with another version of ``Argbash`` and warns you.
In that case, you can use a ``argbash-xtoy`` script, where ``x`` is the version of ``Argbash`` your script is written for and ``y`` is version of ``Argbash`` you use now.

To upgrade your script from ``Argbash`` version 1 to 2, you simply invoke:

.. code-block:: bash

   argbash-1to2 my-script.sh -o my-script.sh
 
You can use the utility to convert scripts as well as ``.m4`` templates.

.. warning::

   Always back your scripts up and perform diff between the output and the original after using ``argbash-xtoy``.

API 2
+++++

Parsed arguments were exposed as uppercase (``_ARG_LONG_OPTION`` vs ``_arg_long_option``).
The change was motivated by effort to comply to bash standard variable naming convention [#]_, [#]_.

.. [#] `Unix StackExchange <http://unix.stackexchange.com/a/42849>`_
.. [#] `Google bash styleguide <https://google.github.io/styleguide/shell.xml#Naming_Conventions>`_
